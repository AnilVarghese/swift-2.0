{"name":"Swift-2.0","tagline":"Migrate to Swift-2.0","body":"### 1. Use Xcode 7 migration tool\r\nWhen you open an existing project in Xcode 7, it will ask you **convert to Latest Swift Syntax?** or you can manually convert using the migration tool _`Edit menu->Convert-> To Latest Swift Syntax`_.\r\n\r\n### 2. Error handeling\r\nAPI's are updated to take advantage of new error handeling mechanism. Any api which throw error should be handled using `try catch`. or you can us `try?` or `try!`\r\n\r\n    //swift 1.2\r\n    var error: NSError?\r\n    let result  = NSJSONSerialization.JSONObjectWithData(inputData, options: NSJSONReadingOptions.MutableContainers, error: &error) as! Dictionary<String,AnyObject>\r\n    \r\n    //swift 2.0\r\n     var result:Dictionary<String,AnyObject>\r\n    do{\r\n    result = try NSJSONSerialization.JSONObjectWithData(inputData, options: NSJSONReadingOptions.MutableContainers) as!Dictionary<String,AnyObject>\r\n    \r\n    }catch{\r\n      print(error)\r\n    }\r\n \r\n### 3. Availabilty\r\nBefore we have used `objc_getClass(\"UIAlertController\")` to check the availabilty. now its more easier by using `#available`. You can even mark your functions specificaly using `@available`\r\n\r\n    if #available(iOS 8.0, *) {\r\n                    let alert = UIAlertController(title: \"Accounts\", message: \"Please login to a Facebook account to share.\", preferredStyle: UIAlertControllerStyle.Alert)\r\n                    \r\n                    alert.addAction(UIAlertAction(title: \"OK\", style: UIAlertActionStyle.Default, handler: nil))\r\n                    self.presentViewController(alert, animated: true, completion: nil)\r\n                    \r\n                } else {\r\n                    let alert = UIAlertView(title: \"Accounts\", message: \"Please login to a Facebook account to share.\", delegate: nil, cancelButtonTitle: \"OK\")\r\n                    alert.show()\r\n                }\r\n        \r\n### 4. Removed # from function parameter name.\r\n`#` has been removed from swift, you should double up the parameter name to have the same argument label \r\n \r\n    //swift 1.2\r\n    func startGameWith(#player:String, #level:Int){\r\n    }\r\n    startGameWith(player:\"anil\", level: 5)\r\n\r\n    //swift 2.0\r\n    func startGameWith(player player:String, level:Int){\r\n    }\r\n    startGameWith(player:\"anil\",level: 5)\r\n\r\n### 5. Unnamed parameter should be marked by `_` \r\n    \r\n    //swift 1.2 \r\n    func add(Int, Int){    \r\n    }\r\n    add(5, 6) \r\n    \r\n    //swift 2.0\r\n    func add(_: Int,_: Int){  \r\n    }\r\n    add(5, 6)\r\n\r\n    \r\n\r\n###6. OptionSetType\r\n`OptionSetType` is a new protocol available in Swwift2.0 . Things like `UIViewAutoresizing` and `NSCalendarUnit` are of type `OptionSetType`\r\n  \r\n    //swift 1.2 \r\n    let autoresizingMask = .FlexibleWidth | .FlexibleHeight \r\n    \r\n    //swift 2.0\r\n    let autoresizingMask = [.FlexibleWidth , .FlexibleHeight]\r\n\r\nMany API's also has changed to take advantage of this protocol, especialy option/settings flags.  \r\n\r\n    UIView.animateWithDuration(1.0, delay: 0, options: nil, animations: { () -> Void in\r\n            \r\n            }, completion: nil)\r\n            \r\n    //swift2.0  \r\n    UIView.animateWithDuration(1.0, delay: 0, options: [], animations: { () -> Void in\r\n            \r\n            }, completion: nil)\r\n\r\n\r\n \r\n\r\n###7. new() is not available  \r\nYou have to use the object constructer instead.\r\n\r\n    CABasicAnimation.new()\r\n    \r\n    //swift2.0\r\n    CABasicAnimation()\r\n\r\n###8. println() is removed  \r\nNow there is only `print()`, additionaly you can have `separator` and `terminator`.\r\n  \r\n    print(\"Hello\")\r\n    \r\n    // Writes the textual representations of `items`, separated by `separator` and terminated by `terminator`\r\n      \r\n     print(items, separator: \",\", terminator: \"\")\r\n    \r\n###9. Mutability warning\r\nUse let and var appropriately. If the value of your variable is never changing, dont use `var`for that, should be `let`.\r\n\r\n    var x = 1\r\n    var y = 2\r\n        \r\n    let z = x+y\r\nAbove code will give warning, x&y are immutable variables, so it should be marked with `let`\r\n###10. String is not collection type\r\n\r\nString is not a collection type anymore.   \r\n    \r\n    count(string) //is wrong\r\n    string.characters.count // right  \r\n     \r\n  Ref: https://developer.apple.com/swift/blog/?id=30\r\n\r\n###11. contains() is not available  \r\nGlobal function contains() is not available use it like `array.contains`\r\n\r\n\r\n###12. To get dictionary keys\r\nCannot use like `dict.keys.array` use `Array(dict.keys)`\r\n\r\n###13.  setTranslatesAutoresizingMaskIntoConstraints() not available  \r\n\r\n    //swift 2.0\r\n    view.translatesAutoresizingMaskIntoConstraints = false\r\n\r\n###14. Changed sorting method name\r\nmethod `sorted` is changed to `sort`.  \r\n\r\n    array.sort{\r\n    }\r\n\r\n###15. find() is not available\r\nGlobal function `find()` is not available use `indexOf()`\r\n   \r\n    //swift 1.2\r\n    let index = find(array, object)\r\n     \r\n    //swift 2.0\r\n    let index = array.indexOf(object)\r\n\r\n\r\n\r\n###16. advance() is not available\r\n Use advanceBy() instead.  \r\n \r\n    //swift 1.2\r\n    status.substringToIndex(advance(status.startIndex, 100))\r\n    \r\n    //swift 2.0\r\n    status.substringToIndex(status.startIndex.advancedBy(100))\r\n\r\n\r\n### join is unavailable use joinWithSeparator\r\n\r\n    //swift 1.2\r\n    join(\",\", array)\r\n    \r\n    //swift 2.0   \r\n    array.joinWithSeparator(\",\")\r\n    \r\n\r\nhttp://stackoverflow.com/questions/32408722/array-is-unavailable-please-construct-an-array-from-your-lazy-sequence-array\r\nhttp://swiftdoc.org/swift-2/type/LazyMapCollection/\r\nmajor changes here https://www.hackingwithswift.com/swift","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}